import torch
import torch.nn as nn
import numpy as np

from model.embedder import get_embedder

class SphericalWaveletMix():
    def __init__(self, t_design_order, j, B):
        self.t_design_order = t_design_order
        self.ek = self.get_t_design()
        self.j = j
        self.B = B
        self.calc_weights()
        self.quadrature_weight = torch.tensor(1.0)#torch.tensor(1 / len(self))
    
    def __len__(self):
        return len(self.ek)

    # The base function used for Littlewood-Paley decomposition.
    def f(self, t):
        y = torch.zeros_like(t)
        y = torch.where(torch.abs(t) < 1, torch.exp(-1.0 / (1.0 - t*t)), y)
        return y
        
    # Integrate a function inside the range [a..b] using Simpson's rule.
    def integrate_g_simpson(self, fn, a, b, num_steps):
        nn = num_steps * 2
        halfstep = (b - a) / nn
        result = fn(torch.zeros_like(b) + a)
        for i in range(1,nn,2):
            x = a + halfstep * i
            result += 4.0 * fn(x)
        for i in range(2,nn-1,2):
            x = a + halfstep * i
            result += 2.0 * fn(x)
        result += fn(b)
        final = halfstep * result / 3
        return final

    def psi(self, x):
        num_steps = max(40, self.max_i - self.min_i)
        int_g = 0.4439938162
        return self.integrate_g_simpson(self.f, -1.0, x, num_steps) / int_g
    
    # The Littlewood-Paley decomposition function.
    def phi(self, t):
        y = torch.zeros_like(t)
        y = torch.where(t<=self.invB, y+1.0, y)
        y = torch.where((t>self.invB) & (t<=1), self.psi(1.0 - ((2.0 * self.B * (t - self.invB))) / (self.B - 1.0)), y)
        return y

    # The needlet weighting function, evaluated at integer positions of t.
    def b(self, t):
        return torch.sqrt( self.phi(t*self.invB) - self.phi(t) )

    def calc_weights(self):
        # print(self.B)
        self.invB = 1.0 / (self.B + 1e-8)
        self.max_i = torch.pow(self.B, self.j + 1).int()
        self.min_i = torch.pow(self.B, self.j - 1).int()
        B_to_j = torch.pow(self.B, self.j)

        self.weights = torch.empty(0).cuda()

        for i in torch.arange(self.min_i, self.max_i):
            self.weights = torch.cat((self.weights, self.b( (i + self.min_i) / B_to_j ).unsqueeze(dim=0)))

            # print(self.weights[(i-self.min_i).item()])
    # Generate a Legendre polynomial at point X of order N
    def legendre(self, x, order):
        n = 2.0
        p = 0.0
        pm1 = x
        pm2 = 1.0

        for count in range(order+1):
            if count == 0 : p = torch.zeros_like(x) + 1.0
            elif count == 1 : p = x
            else:
                p = ( (2.0 * n - 1.0) * x * pm1 - (n - 1.0) * pm2 ) / n
                pm2 = pm1
                pm1 = p
                n += 1.0
        return p
    
    def single(self, theta, phi, ek, lw_weight):

        x = torch.sin(phi) * torch.cos(theta)
        y = torch.sin(phi) * torch.sin(theta)
        z = torch.cos(phi)

        v = x*ek[0] + y*ek[1] + z*ek[2] # torch.dot(ek,self.e)

        result = torch.zeros_like(theta).cuda()
        
        for i in range(self.min_i,self.max_i):
            result += lw_weight[i-self.min_i] * self.legendre(v.cuda(),i+1)#.expand(3,-1,-1)
        
        return torch.sqrt(self.quadrature_weight) * result

    def basis(self, theta, phi):
        num = len(self)
        height, width = theta.shape

        ret = torch.zeros(num, height, width)
        for i in range(num):
            ret[i, ...] = self.single(theta, phi, self.ek[i], self.weights)

        return ret
    
    def get_t_design(self):
        if   self.t_design_order ==  0:
            points = torch.tensor([[ 1.   ,  0.   ,  0.   ]])
        elif self.t_design_order ==  1:
            points = torch.tensor([[ 1.   ,  0.   ,  0.   ],
                                   [-1.   ,  0.   ,  0.   ]])
        elif self.t_design_order ==  2:
            points = torch.tensor([[  .577,   .577,   .577],
                                   [  .577, - .577, - .577],
                                   [- .577,   .577, - .577],
                                   [- .577,-  .577,   .577]])
        elif self.t_design_order ==  3:
            points = torch.tensor([[ 1.   ,  0.   ,  0.   ],
                                   [-1.   ,  0.   ,  0.   ],
                                   [ 0.   ,  1.   ,  0.   ],
                                   [ 0.   , -1.   ,  0.   ],
                                   [ 0.   ,  0.   ,  1.   ],
                                   [ 0.   ,  0.   , -1.   ]])
        elif self.t_design_order ==  4:
            points = torch.tensor([[ 1.   ,  0.   ,  0.   ],
                                   [ 0.595,  0.178,  0.784],
                                   [ 0.595, -0.768, -0.238],
                                   [ 0.595,  0.59 , -0.546],
                                   [-0.595,  0.178, -0.784],
                                   [-0.595,  0.59 ,  0.546],
                                   [-0.595, -0.768,  0.238],
                                   [ 0.301,  0.879,  0.368],
                                   [ 0.301, -0.759,  0.577],
                                   [ 0.301, -0.121, -0.946],
                                   [-0.301,  0.879, -0.368],
                                   [-0.301, -0.121,  0.946],
                                   [-0.301, -0.759, -0.577],
                                   [-1.   ,  0.   ,  0.   ]])
        elif self.t_design_order ==  5:
            points = torch.tensor([[ 0.851,  0.   , -0.526],
                                   [ 0.526, -0.851,  0.   ],
                                   [ 0.   , -0.526,  0.851],
                                   [ 0.851,  0.   ,  0.526],
                                   [-0.526, -0.851,  0.   ],
                                   [ 0.   ,  0.526, -0.851],
                                   [-0.851,  0.   , -0.526],
                                   [-0.526,  0.851,  0.   ],
                                   [ 0.   ,  0.526,  0.851],
                                   [-0.851,  0.   ,  0.526],
                                   [ 0.526,  0.851,  0.   ],
                                   [ 0.   , -0.526, -0.851]])
        elif self.t_design_order ==  6:
            points = torch.tensor([[-0.616,  0.101,  0.782],
                                   [ 0.395,  0.483,  0.782],
                                   [ 0.221, -0.584,  0.782],
                                   [-0.416,  0.666,  0.619],
                                   [-0.368, -0.694,  0.619],
                                   [ 0.785,  0.028,  0.619],
                                   [-0.975,  0.218,  0.036],
                                   [ 0.676,  0.736,  0.036],
                                   [ 0.299, -0.954,  0.036],
                                   [ 0.751, -0.566,  0.340],
                                   [ 0.115,  0.933,  0.340],
                                   [-0.866, -0.367,  0.340],
                                   [ 0.000, -0.000,  1.000],
                                   [-0.000, -0.000, -1.000],
                                   [ 0.866, -0.367, -0.340],
                                   [-0.115,  0.933, -0.340],
                                   [-0.751, -0.566, -0.340],
                                   [-0.299, -0.954, -0.036],
                                   [-0.676,  0.736, -0.036],
                                   [ 0.975,  0.218, -0.036],
                                   [-0.785,  0.028, -0.619],
                                   [ 0.368, -0.694, -0.619],
                                   [ 0.416,  0.666, -0.619],
                                   [-0.221, -0.584, -0.782],
                                   [-0.395,  0.483, -0.782],
                                   [ 0.616,  0.101, -0.782]])
        elif self.t_design_order ==  7:
            points = torch.tensor([[ 0.866,  0.423,  0.267],
                                   [ 0.866, -0.423, -0.267],
                                   [ 0.866,  0.267, -0.423],
                                   [ 0.866, -0.267,  0.423],
                                   [-0.866,  0.423, -0.267],
                                   [-0.866, -0.423,  0.267],
                                   [-0.866,  0.267,  0.423],
                                   [-0.866, -0.267, -0.423],
                                   [ 0.267,  0.866,  0.423],
                                   [-0.267,  0.866, -0.423],
                                   [-0.423,  0.866,  0.267],
                                   [ 0.423,  0.866, -0.267],
                                   [-0.267, -0.866,  0.423],
                                   [ 0.267, -0.866, -0.423],
                                   [ 0.423, -0.866,  0.267],
                                   [-0.423, -0.866, -0.267],
                                   [ 0.423,  0.267,  0.866],
                                   [-0.423, -0.267,  0.866],
                                   [ 0.267, -0.423,  0.866],
                                   [-0.267,  0.423,  0.866],
                                   [ 0.423, -0.267, -0.866],
                                   [-0.423,  0.267, -0.866],
                                   [ 0.267,  0.423, -0.866],
                                   [-0.267, -0.423, -0.866]])
        elif self.t_design_order ==  8:
            points = torch.tensor([[ 0.507, -0.306,  0.805],
                                   [-0.306,  0.805,  0.507],
                                   [-0.507,  0.306,  0.805],
                                   [ 0.805,  0.507, -0.306],
                                   [ 0.306,  0.805, -0.507],
                                   [ 0.805, -0.507,  0.306],
                                   [ 0.306, -0.805,  0.507],
                                   [-0.805, -0.507, -0.306],
                                   [-0.306, -0.805, -0.507],
                                   [-0.805,  0.507,  0.306],
                                   [ 0.507,  0.306, -0.805],
                                   [-0.507, -0.306, -0.805],
                                   [ 0.626, -0.244, -0.741],
                                   [-0.244, -0.741,  0.626],
                                   [-0.626,  0.244, -0.741],
                                   [-0.741,  0.626, -0.244],
                                   [ 0.244, -0.741, -0.626],
                                   [-0.741, -0.626,  0.244],
                                   [ 0.244,  0.741,  0.626],
                                   [ 0.741, -0.626, -0.244],
                                   [-0.244,  0.741, -0.626],
                                   [ 0.741,  0.626,  0.244],
                                   [ 0.626,  0.244,  0.741],
                                   [-0.626, -0.244,  0.741],
                                   [-0.286,  0.957, -0.045],
                                   [ 0.957, -0.045, -0.286],
                                   [ 0.286, -0.957, -0.045],
                                   [-0.045, -0.286,  0.957],
                                   [-0.957, -0.045,  0.286],
                                   [-0.045,  0.286, -0.957],
                                   [-0.957,  0.045, -0.286],
                                   [ 0.045,  0.286,  0.957],
                                   [ 0.957,  0.045,  0.286],
                                   [ 0.045, -0.286, -0.957],
                                   [-0.286, -0.957,  0.045],
                                   [ 0.286,  0.957,  0.045]])            
        elif self.t_design_order ==  9:
            points = torch.tensor([[ 0.933,  0.354, -0.062],
                                   [ 0.933, -0.354,  0.062],
                                   [ 0.933, -0.062, -0.354],
                                   [ 0.933,  0.062,  0.354],
                                   [-0.933,  0.354,  0.062],
                                   [-0.933, -0.354, -0.062],
                                   [-0.933, -0.062,  0.354],
                                   [-0.933,  0.062, -0.354],
                                   [-0.062,  0.933,  0.354],
                                   [ 0.062,  0.933, -0.354],
                                   [-0.354,  0.933, -0.062],
                                   [ 0.354,  0.933,  0.062],
                                   [ 0.062, -0.933,  0.354],
                                   [-0.062, -0.933, -0.354],
                                   [ 0.354, -0.933, -0.062],
                                   [-0.354, -0.933,  0.062],
                                   [ 0.354, -0.062,  0.933],
                                   [-0.354,  0.062,  0.933],
                                   [-0.062, -0.354,  0.933],
                                   [ 0.062,  0.354,  0.933],
                                   [ 0.354,  0.062, -0.933],
                                   [-0.354, -0.062, -0.933],
                                   [-0.062,  0.354, -0.933],
                                   [ 0.062, -0.354, -0.933],
                                   [ 0.707,  0.640,  0.302],
                                   [ 0.707, -0.640, -0.302],
                                   [ 0.707,  0.302, -0.640],
                                   [ 0.707, -0.302,  0.640],
                                   [-0.707,  0.640, -0.302],
                                   [-0.707, -0.640,  0.302],
                                   [-0.707,  0.302,  0.640],
                                   [-0.707, -0.302, -0.640],
                                   [ 0.302,  0.707,  0.640],
                                   [-0.302,  0.707, -0.640],
                                   [-0.640,  0.707,  0.302],
                                   [ 0.640,  0.707, -0.302],
                                   [-0.302, -0.707,  0.640],
                                   [ 0.302, -0.707, -0.640],
                                   [ 0.640, -0.707,  0.302],
                                   [-0.640, -0.707, -0.302],
                                   [ 0.640,  0.302,  0.707],
                                   [-0.640, -0.302,  0.707],
                                   [ 0.302, -0.640,  0.707],
                                   [-0.302,  0.640,  0.707],
                                   [ 0.640, -0.302, -0.707],
                                   [-0.640,  0.302, -0.707],
                                   [ 0.302,  0.640, -0.707],
                                   [-0.302, -0.640, -0.707]])
        elif self.t_design_order == 10:
            points = torch.tensor([[-0.754,  0.546, -0.366],
                                   [ 0.546, -0.366, -0.754],
                                   [ 0.754, -0.546, -0.366],
                                   [-0.366, -0.754,  0.546],
                                   [-0.546, -0.366,  0.754],
                                   [-0.366,  0.754, -0.546],
                                   [-0.546,  0.366, -0.754],
                                   [ 0.366,  0.754,  0.546],
                                   [ 0.546,  0.366,  0.754],
                                   [ 0.366, -0.754, -0.546],
                                   [-0.754, -0.546,  0.366],
                                   [ 0.754,  0.546,  0.366],
                                   [ 0.700, -0.713,  0.034],
                                   [-0.713,  0.034,  0.700],
                                   [-0.700,  0.713,  0.034],
                                   [ 0.034,  0.700, -0.713],
                                   [ 0.713,  0.034, -0.700],
                                   [ 0.034, -0.700,  0.713],
                                   [ 0.713, -0.034,  0.700],
                                   [-0.034, -0.700, -0.713],
                                   [-0.713, -0.034, -0.700],
                                   [-0.034,  0.700,  0.713],
                                   [ 0.700,  0.713, -0.034],
                                   [-0.700, -0.713, -0.034],
                                   [ 0.276,  0.077, -0.958],
                                   [ 0.077, -0.958,  0.276],
                                   [-0.276, -0.077, -0.958],
                                   [-0.958,  0.276,  0.077],
                                   [-0.077, -0.958, -0.276],
                                   [-0.958, -0.276, -0.077],
                                   [-0.077,  0.958,  0.276],
                                   [ 0.958, -0.276,  0.077],
                                   [ 0.077,  0.958, -0.276],
                                   [ 0.958,  0.276, -0.077],
                                   [ 0.276, -0.077,  0.958],
                                   [-0.276,  0.077,  0.958],
                                   [ 0.452, -0.783,  0.427],
                                   [-0.783,  0.427,  0.452],
                                   [-0.452,  0.783,  0.427],
                                   [ 0.427,  0.452, -0.783],
                                   [ 0.783,  0.427, -0.452],
                                   [ 0.427, -0.452,  0.783],
                                   [ 0.783, -0.427,  0.452],
                                   [-0.427, -0.452, -0.783],
                                   [-0.783, -0.427, -0.452],
                                   [-0.427,  0.452,  0.783],
                                   [ 0.452,  0.783, -0.427],
                                   [-0.452, -0.783, -0.427],
                                   [-0.339, -0.933,  0.120],
                                   [-0.933,  0.120, -0.339],
                                   [ 0.339,  0.933,  0.120],
                                   [ 0.120, -0.339, -0.933],
                                   [ 0.933,  0.120,  0.339],
                                   [ 0.120,  0.339,  0.933],
                                   [ 0.933, -0.120, -0.339],
                                   [-0.120,  0.339, -0.933],
                                   [-0.933, -0.120,  0.339],
                                   [-0.120, -0.339,  0.933],
                                   [-0.339,  0.933, -0.120],
                                   [ 0.339, -0.933, -0.120]])
        elif self.t_design_order == 11:
            points = torch.tensor([[-0.675,  0.726,  0.134],
                                   [ 0.097, -0.910, -0.402],
                                   [ 0.907,  0.135,  0.399],
                                   [-0.133, -0.308,  0.942],
                                   [-0.226, -0.959, -0.172],
                                   [ 0.276, -0.181, -0.944],
                                   [ 0.831,  0.333, -0.446],
                                   [-0.616, -0.268,  0.741],
                                   [ 0.430, -0.893, -0.134],
                                   [-0.691,  0.175,  0.701],
                                   [ 0.811, -0.381,  0.444],
                                   [-0.087, -0.706, -0.703],
                                   [ 0.871,  0.460,  0.170],
                                   [-0.601,  0.303, -0.740],
                                   [-0.899, -0.418,  0.130],
                                   [ 0.897, -0.188, -0.400],
                                   [ 0.150,  0.903,  0.402],
                                   [ 0.249, -0.224,  0.942],
                                   [ 0.843, -0.511, -0.171],
                                   [ 0.260,  0.209, -0.943],
                                   [-0.059,  0.895, -0.443],
                                   [ 0.062, -0.671,  0.739],
                                   [ 0.982,  0.134, -0.131],
                                   [-0.382, -0.605,  0.698],
                                   [ 0.612,  0.652,  0.448],
                                   [ 0.647, -0.298, -0.702],
                                   [-0.169,  0.970,  0.172],
                                   [-0.472, -0.475, -0.743],
                                   [ 0.119, -0.985,  0.127],
                                   [ 0.457,  0.796, -0.396],
                                   [-0.814,  0.421,  0.401],
                                   [ 0.287,  0.164,  0.944],
                                   [ 0.747,  0.644, -0.166],
                                   [-0.116,  0.315, -0.942],
                                   [-0.868,  0.222, -0.445],
                                   [ 0.655, -0.151,  0.740],
                                   [ 0.177,  0.976, -0.127],
                                   [ 0.455, -0.553,  0.698],
                                   [-0.432,  0.782,  0.450],
                                   [ 0.486,  0.525, -0.699],
                                   [-0.976,  0.138,  0.170],
                                   [ 0.309, -0.593, -0.744],
                                   [ 0.973, -0.191,  0.129],
                                   [-0.615,  0.682, -0.396],
                                   [-0.653, -0.645,  0.397],
                                   [-0.070,  0.321,  0.945],
                                   [-0.381,  0.910, -0.165],
                                   [-0.332, -0.010, -0.943],
                                   [-0.478, -0.755, -0.449],
                                   [ 0.344,  0.574,  0.743],
                                   [-0.873,  0.470, -0.128],
                                   [ 0.664,  0.260,  0.701],
                                   [-0.878, -0.171,  0.446],
                                   [-0.347,  0.627, -0.698],
                                   [-0.434, -0.886,  0.165],
                                   [ 0.662,  0.113, -0.741],
                                   [ 0.482,  0.866,  0.134],
                                   [-0.837, -0.372, -0.400],
                                   [ 0.410, -0.822,  0.396],
                                   [-0.330,  0.029,  0.944],
                                   [-0.982, -0.081, -0.168],
                                   [-0.090, -0.316, -0.944],
                                   [ 0.572, -0.686, -0.449],
                                   [-0.442,  0.502,  0.743],
                                   [-0.717, -0.685, -0.133],
                                   [-0.044,  0.710,  0.703],
                                   [-0.111, -0.890,  0.443],
                                   [-0.701, -0.134, -0.700],
                                   [ 0.708, -0.687,  0.165],
                                   [ 0.100,  0.667, -0.739],])
        elif self.t_design_order == 12:
            points = torch.tensor([[-0.894, -0.427,  0.137],
                                   [-0.427,  0.137, -0.894],
                                   [ 0.894,  0.427,  0.137],
                                   [ 0.137, -0.894, -0.427],
                                   [ 0.427,  0.137,  0.894],
                                   [ 0.137,  0.894,  0.427],
                                   [ 0.427, -0.137, -0.894],
                                   [-0.137,  0.894, -0.427],
                                   [-0.427, -0.137,  0.894],
                                   [-0.137, -0.894,  0.427],
                                   [-0.894,  0.427, -0.137],
                                   [ 0.894, -0.427, -0.137],
                                   [ 0.983,  0.022, -0.182],
                                   [ 0.022, -0.182,  0.983],
                                   [-0.983, -0.022, -0.182],
                                   [-0.182,  0.983,  0.022],
                                   [-0.022, -0.182, -0.983],
                                   [-0.182, -0.983, -0.022],
                                   [-0.022,  0.182,  0.983],
                                   [ 0.182, -0.983,  0.022],
                                   [ 0.022,  0.182, -0.983],
                                   [ 0.182,  0.983, -0.022],
                                   [ 0.983, -0.022,  0.182],
                                   [-0.983,  0.022,  0.182],
                                   [-0.898,  0.377,  0.228],
                                   [ 0.377,  0.228, -0.898],
                                   [ 0.898, -0.377,  0.228],
                                   [ 0.228, -0.898,  0.377],
                                   [-0.377,  0.228,  0.898],
                                   [ 0.228,  0.898, -0.377],
                                   [-0.377, -0.228, -0.898],
                                   [-0.228,  0.898,  0.377],
                                   [ 0.377, -0.228,  0.898],
                                   [-0.228, -0.898, -0.377],
                                   [-0.898, -0.377, -0.228],
                                   [ 0.898,  0.377, -0.228],
                                   [-0.171,  0.460, -0.871],
                                   [ 0.460, -0.871, -0.171],
                                   [ 0.171, -0.460, -0.871],
                                   [-0.871, -0.171,  0.460],
                                   [-0.460, -0.871,  0.171],
                                   [-0.871,  0.171, -0.460],
                                   [-0.460,  0.871, -0.171],
                                   [ 0.871,  0.171,  0.460],
                                   [ 0.460,  0.871,  0.171],
                                   [ 0.871, -0.171, -0.460],
                                   [-0.171, -0.460,  0.871],
                                   [ 0.171,  0.460,  0.871],
                                   [-0.397, -0.548, -0.736],
                                   [-0.548, -0.736, -0.397],
                                   [ 0.397,  0.548, -0.736],
                                   [-0.736, -0.397, -0.548],
                                   [ 0.548, -0.736,  0.397],
                                   [-0.736,  0.397,  0.548],
                                   [ 0.548,  0.736, -0.397],
                                   [ 0.736,  0.397, -0.548],
                                   [-0.548,  0.736,  0.397],
                                   [ 0.736, -0.397,  0.548],
                                   [-0.397,  0.548,  0.736],
                                   [ 0.397, -0.548,  0.736],
                                   [ 0.379,  0.696,  0.609],
                                   [ 0.696,  0.609,  0.379],
                                   [-0.379, -0.696,  0.609],
                                   [ 0.609,  0.379,  0.696],
                                   [-0.696,  0.609, -0.379],
                                   [ 0.609, -0.379, -0.696],
                                   [-0.696, -0.609,  0.379],
                                   [-0.609, -0.379,  0.696],
                                   [ 0.696, -0.609, -0.379],
                                   [-0.609,  0.379, -0.696],
                                   [ 0.379, -0.696, -0.609],
                                   [-0.379,  0.696, -0.609],
                                   [-0.679,  0.730,  0.083],
                                   [ 0.730,  0.083, -0.679],
                                   [ 0.679, -0.730,  0.083],
                                   [ 0.083, -0.679,  0.730],
                                   [-0.730,  0.083,  0.679],
                                   [ 0.083,  0.679, -0.730],
                                   [-0.730, -0.083, -0.679],
                                   [-0.083,  0.679,  0.730],
                                   [ 0.730, -0.083,  0.679],
                                   [-0.083, -0.679, -0.730],
                                   [-0.679, -0.730, -0.083],
                                   [ 0.679,  0.730, -0.083],])
        elif self.t_design_order == 13:
            points = torch.tensor([[ 0.277, -0.235,  0.932],
                                   [ 0.199,  0.361,  0.911],
                                   [-0.259,  0.204,  0.944],
                                   [-0.200, -0.228,  0.953],
                                   [-0.884, -0.414, -0.218],
                                   [ 0.398, -0.902, -0.170],
                                   [ 0.877,  0.434, -0.207],
                                   [-0.412,  0.885, -0.218],
                                   [ 0.501,  0.378,  0.779],
                                   [-0.394,  0.474,  0.788],
                                   [-0.495, -0.406,  0.768],
                                   [ 0.370, -0.559,  0.742],
                                   [ 0.412, -0.885,  0.218],
                                   [ 0.884,  0.414,  0.218],
                                   [-0.398,  0.902,  0.170],
                                   [-0.877, -0.434,  0.207],
                                   [-0.691, -0.703, -0.169],
                                   [ 0.684, -0.714, -0.145],
                                   [ 0.661,  0.731, -0.169],
                                   [-0.774,  0.615, -0.152],
                                   [ 0.684, -0.220, -0.696],
                                   [ 0.257,  0.681, -0.685],
                                   [-0.644,  0.354, -0.678],
                                   [-0.221, -0.732, -0.645],
                                   [ 0.394, -0.474, -0.788],
                                   [ 0.495,  0.406, -0.768],
                                   [-0.370,  0.559, -0.742],
                                   [-0.501, -0.378, -0.779],
                                   [-0.489, -0.007, -0.872],
                                   [ 0.056, -0.584, -0.810],
                                   [ 0.527,  0.050, -0.849],
                                   [ 0.004,  0.489, -0.872],
                                   [-0.710, -0.480,  0.515],
                                   [ 0.521, -0.728,  0.445],
                                   [ 0.738,  0.408,  0.537],
                                   [-0.496,  0.700,  0.514],
                                   [-0.973,  0.194, -0.123],
                                   [-0.376, -0.909, -0.180],
                                   [ 0.914, -0.369, -0.167],
                                   [ 0.287,  0.947, -0.145],
                                   [-0.099,  0.995,  0.001],
                                   [-0.986, -0.161,  0.041],
                                   [ 0.099, -0.995, -0.001],
                                   [ 0.986,  0.161, -0.041],
                                   [ 0.815,  0.132, -0.564],
                                   [-0.114,  0.787, -0.606],
                                   [-0.761, -0.011, -0.649],
                                   [ 0.180, -0.832, -0.524],
                                   [-0.928, -0.047, -0.370],
                                   [-0.062, -0.944, -0.323],
                                   [ 0.940, -0.045, -0.339],
                                   [-0.008,  0.934, -0.357],
                                   [-0.287, -0.947,  0.145],
                                   [ 0.973, -0.194,  0.123],
                                   [ 0.376,  0.909,  0.180],
                                   [-0.914,  0.369,  0.167],
                                   [-0.199, -0.361, -0.911],
                                   [ 0.259, -0.204, -0.944],
                                   [ 0.200,  0.228, -0.953],
                                   [-0.277,  0.235, -0.932],
                                   [ 0.496, -0.700, -0.514],
                                   [ 0.710,  0.480, -0.515],
                                   [-0.521,  0.728, -0.445],
                                   [-0.738, -0.408, -0.537],
                                   [-0.815, -0.132,  0.564],
                                   [ 0.114, -0.787,  0.606],
                                   [ 0.761,  0.011,  0.649],
                                   [-0.180,  0.832,  0.524],
                                   [ 0.644, -0.354,  0.678],
                                   [ 0.221,  0.732,  0.645],
                                   [-0.684,  0.220,  0.696],
                                   [-0.257, -0.681,  0.685],
                                   [ 0.008, -0.934,  0.357],
                                   [ 0.928,  0.047,  0.370],
                                   [ 0.062,  0.944,  0.323],
                                   [-0.940,  0.045,  0.339],
                                   [-0.684,  0.714,  0.145],
                                   [-0.661, -0.731,  0.169],
                                   [ 0.774, -0.615,  0.152],
                                   [ 0.691,  0.703,  0.169],
                                   [ 0.824, -0.395,  0.407],
                                   [ 0.494,  0.709,  0.503],
                                   [-0.759,  0.451,  0.470],
                                   [-0.431, -0.788,  0.439],
                                   [ 0.489,  0.007,  0.872],
                                   [-0.056,  0.584,  0.810],
                                   [-0.527, -0.050,  0.849],
                                   [-0.004, -0.489,  0.872],
                                   [-0.494, -0.709, -0.503],
                                   [ 0.759, -0.451, -0.470],
                                   [ 0.431,  0.788, -0.439],
                                   [-0.824,  0.395, -0.407],
                                   [-0.052, -0.056, -0.997],
                                   [ 0.052,  0.056,  0.997]])
        elif self.t_design_order == 14:
            points = torch.tensor([[-0.626, -0.767,  0.141],
                                   [-0.767,  0.141, -0.626],
                                   [ 0.625,  0.767,  0.141],
                                   [ 0.141, -0.625, -0.767],
                                   [ 0.767,  0.141,  0.626],
                                   [ 0.141,  0.626,  0.767],
                                   [ 0.767, -0.141, -0.626],
                                   [-0.141,  0.626, -0.767],
                                   [-0.767, -0.141,  0.625],
                                   [-0.141, -0.626,  0.767],
                                   [-0.626,  0.767, -0.141],
                                   [ 0.626, -0.767, -0.141],
                                   [ 0.557, -0.045, -0.829],
                                   [-0.045, -0.829,  0.557],
                                   [-0.557,  0.045, -0.829],
                                   [-0.829,  0.557, -0.045],
                                   [ 0.045, -0.829, -0.557],
                                   [-0.829, -0.557,  0.045],
                                   [ 0.045,  0.829,  0.557],
                                   [ 0.829, -0.557, -0.045],
                                   [-0.045,  0.829, -0.557],
                                   [ 0.829,  0.557,  0.045],
                                   [ 0.557,  0.045,  0.829],
                                   [-0.557, -0.045,  0.829],
                                   [-0.256,  0.861,  0.440],
                                   [ 0.861,  0.440, -0.256],
                                   [ 0.256, -0.861,  0.440],
                                   [ 0.440, -0.256,  0.861],
                                   [-0.861,  0.440,  0.256],
                                   [ 0.440,  0.256, -0.861],
                                   [-0.861, -0.440, -0.256],
                                   [-0.440,  0.256,  0.861],
                                   [ 0.861, -0.440,  0.256],
                                   [-0.440, -0.256, -0.861],
                                   [-0.256, -0.861, -0.440],
                                   [ 0.256,  0.861, -0.440],
                                   [-0.215, -0.032,  0.976],
                                   [-0.032,  0.976, -0.215],
                                   [ 0.215,  0.032,  0.976],
                                   [ 0.976, -0.215, -0.032],
                                   [ 0.032,  0.976,  0.215],
                                   [ 0.976,  0.215,  0.032],
                                   [ 0.032, -0.976, -0.215],
                                   [-0.976,  0.215, -0.032],
                                   [-0.032, -0.976,  0.215],
                                   [-0.976, -0.215,  0.032],
                                   [-0.215,  0.032, -0.976],
                                   [ 0.215, -0.032, -0.976],
                                   [-0.532, -0.827, -0.181],
                                   [-0.827, -0.181, -0.532],
                                   [ 0.532,  0.827, -0.181],
                                   [-0.181, -0.532, -0.827],
                                   [ 0.827, -0.181,  0.532],
                                   [-0.181,  0.532,  0.827],
                                   [ 0.827,  0.181, -0.532],
                                   [ 0.181,  0.532, -0.827],
                                   [-0.827,  0.181,  0.532],
                                   [ 0.181, -0.532,  0.827],
                                   [-0.532,  0.827,  0.181],
                                   [ 0.532, -0.827,  0.181],
                                   [-0.660, -0.641, -0.392],
                                   [-0.641, -0.391, -0.660],
                                   [ 0.660,  0.641, -0.391],
                                   [-0.391, -0.660, -0.641],
                                   [ 0.641, -0.391,  0.660],
                                   [-0.392,  0.660,  0.641],
                                   [ 0.641,  0.392, -0.660],
                                   [ 0.391,  0.660, -0.641],
                                   [-0.641,  0.391,  0.660],
                                   [ 0.391, -0.660,  0.641],
                                   [-0.660,  0.641,  0.391],
                                   [ 0.660, -0.641,  0.391],
                                   [-0.888, -0.296,  0.352],
                                   [-0.296,  0.352, -0.888],
                                   [ 0.888,  0.296,  0.352],
                                   [ 0.352, -0.888, -0.296],
                                   [ 0.296,  0.352,  0.888],
                                   [ 0.352,  0.888,  0.296],
                                   [ 0.296, -0.352, -0.888],
                                   [-0.352,  0.888, -0.296],
                                   [-0.296, -0.352,  0.888],
                                   [-0.352, -0.888,  0.296],
                                   [-0.888,  0.296, -0.352],
                                   [ 0.888, -0.296, -0.352],
                                   [-0.262, -0.963, -0.059],
                                   [-0.963, -0.059, -0.262],
                                   [ 0.262,  0.963, -0.059],
                                   [-0.059, -0.262, -0.963],
                                   [ 0.963, -0.059,  0.262],
                                   [-0.059,  0.262,  0.963],
                                   [ 0.963,  0.059, -0.262],
                                   [ 0.059,  0.262, -0.963],
                                   [-0.963,  0.059,  0.262],
                                   [ 0.059, -0.262,  0.963],
                                   [-0.262,  0.963,  0.059],
                                   [ 0.262, -0.963,  0.059],
                                   [-0.716, -0.551,  0.429],
                                   [-0.551,  0.429, -0.716],
                                   [ 0.715,  0.551,  0.429],
                                   [ 0.429, -0.715, -0.551],
                                   [ 0.551,  0.429,  0.716],
                                   [ 0.429,  0.716,  0.551],
                                   [ 0.551, -0.429, -0.715],
                                   [-0.429,  0.716, -0.551],
                                   [-0.551, -0.429,  0.715],
                                   [-0.429, -0.716,  0.551],
                                   [-0.716,  0.551, -0.429],
                                   [ 0.716, -0.551, -0.429]])
        elif self.t_design_order == 15:
            points = torch.tensor([[ 0.854, -0.505,  0.121],
                                    [-0.505,  0.121,  0.854],
                                    [-0.854,  0.505,  0.121],
                                    [ 0.121,  0.854, -0.505],
                                    [ 0.505,  0.121, -0.854],
                                    [ 0.121, -0.854,  0.505],
                                    [ 0.506, -0.121,  0.854],
                                    [-0.121, -0.854, -0.506],
                                    [-0.506, -0.121, -0.854],
                                    [-0.121,  0.854,  0.506],
                                    [ 0.854,  0.506, -0.121],
                                    [-0.854, -0.506, -0.121],
                                    [-0.265,  0.884, -0.386],
                                    [ 0.884, -0.386, -0.265],
                                    [ 0.265, -0.884, -0.386],
                                    [-0.386, -0.265,  0.884],
                                    [-0.884, -0.386,  0.265],
                                    [-0.386,  0.265, -0.884],
                                    [-0.884,  0.386, -0.265],
                                    [ 0.386,  0.265,  0.884],
                                    [ 0.884,  0.386,  0.265],
                                    [ 0.386, -0.265, -0.884],
                                    [-0.265, -0.884,  0.386],
                                    [ 0.265,  0.884,  0.386],
                                    [-0.973,  0.228,  0.024],
                                    [ 0.228,  0.024, -0.973],
                                    [ 0.973, -0.228,  0.024],
                                    [ 0.024, -0.973,  0.228],
                                    [-0.228,  0.024,  0.973],
                                    [ 0.024,  0.973, -0.228],
                                    [-0.228, -0.024, -0.973],
                                    [-0.024,  0.973,  0.228],
                                    [ 0.228, -0.024,  0.973],
                                    [-0.024, -0.973, -0.228],
                                    [-0.973, -0.228, -0.024],
                                    [ 0.973,  0.228, -0.024],
                                    [ 0.176, -0.644,  0.744],
                                    [-0.644,  0.744,  0.176],
                                    [-0.176,  0.644,  0.745],
                                    [ 0.744,  0.177, -0.644],
                                    [ 0.644,  0.745, -0.176],
                                    [ 0.745, -0.176,  0.644],
                                    [ 0.644, -0.744,  0.176],
                                    [-0.745, -0.176, -0.644],
                                    [-0.644, -0.745, -0.176],
                                    [-0.745,  0.176,  0.644],
                                    [ 0.176,  0.644, -0.744],
                                    [-0.176, -0.644, -0.745],
                                    [-0.538, -0.714,  0.447],
                                    [-0.714,  0.447, -0.538],
                                    [ 0.538,  0.714,  0.447],
                                    [ 0.447, -0.538, -0.714],
                                    [ 0.714,  0.447,  0.538],
                                    [ 0.447,  0.538,  0.714],
                                    [ 0.714, -0.447, -0.539],
                                    [-0.447,  0.538, -0.714],
                                    [-0.714, -0.447,  0.538],
                                    [-0.447, -0.539,  0.714],
                                    [-0.539,  0.714, -0.447],
                                    [ 0.538, -0.714, -0.447],
                                    [-0.854, -0.121,  0.506],
                                    [-0.121,  0.506, -0.854],
                                    [ 0.854,  0.121,  0.505],
                                    [ 0.506, -0.854, -0.121],
                                    [ 0.121,  0.505,  0.854],
                                    [ 0.505,  0.854,  0.121],
                                    [ 0.121, -0.505, -0.854],
                                    [-0.506,  0.854, -0.121],
                                    [-0.121, -0.506,  0.854],
                                    [-0.505, -0.854,  0.121],
                                    [-0.854,  0.121, -0.505],
                                    [ 0.854, -0.121, -0.506],
                                    [ 0.744,  0.644,  0.176],
                                    [ 0.644,  0.176,  0.745],
                                    [-0.744, -0.644,  0.176],
                                    [ 0.176,  0.744,  0.644],
                                    [-0.644,  0.176, -0.744],
                                    [ 0.176, -0.744, -0.644],
                                    [-0.644, -0.177,  0.745],
                                    [-0.176, -0.745,  0.644],
                                    [ 0.644, -0.176, -0.745],
                                    [-0.177,  0.745, -0.644],
                                    [ 0.745, -0.644, -0.176],
                                    [-0.745,  0.644, -0.176],
                                    [-0.228,  0.973, -0.024],
                                    [ 0.973, -0.024, -0.228],
                                    [ 0.228, -0.973, -0.024],
                                    [-0.024, -0.228,  0.973],
                                    [-0.973, -0.024,  0.228],
                                    [-0.024,  0.228, -0.973],
                                    [-0.973,  0.024, -0.228],
                                    [ 0.024,  0.228,  0.973],
                                    [ 0.973,  0.024,  0.228],
                                    [ 0.024, -0.228, -0.973],
                                    [-0.228, -0.973,  0.024],
                                    [ 0.228,  0.973,  0.024],
                                    [ 0.714,  0.539, -0.447],
                                    [ 0.539, -0.447,  0.714],
                                    [-0.714, -0.538, -0.447],
                                    [-0.447,  0.714,  0.539],
                                    [-0.538, -0.447, -0.714],
                                    [-0.447, -0.714, -0.538],
                                    [-0.538,  0.447,  0.714],
                                    [ 0.447, -0.714,  0.538],
                                    [ 0.538,  0.447, -0.714],
                                    [ 0.447,  0.714, -0.538],
                                    [ 0.714, -0.538,  0.447],
                                    [-0.714,  0.538,  0.447],
                                    [-0.884,  0.265,  0.386],
                                    [ 0.265,  0.386, -0.884],
                                    [ 0.884, -0.265,  0.386],
                                    [ 0.386, -0.884,  0.265],
                                    [-0.265,  0.386,  0.884],
                                    [ 0.386,  0.884, -0.265],
                                    [-0.265, -0.386, -0.884],
                                    [-0.386,  0.884,  0.265],
                                    [ 0.265, -0.386,  0.884],
                                    [-0.386, -0.884, -0.265],
                                    [-0.884, -0.265, -0.386],
                                    [ 0.884,  0.265, -0.386]])
        return points

class SWEnvmapMaterialNetwork(nn.Module):
    def __init__(self, multires=0, dims=[256, 256, 256],
                 white_specular=False,
                 white_light=False,
                 fix_specular_albedo=False,
                 train_bandwidth=False,
                 specular_albedo=[-1.,-1.,-1.],
                 t_design_order=3,
                 sw_scale=1,
                 sw_bandwidth=None,
                 envmap_height=256,
                 envmap_width=512
                 ):
        super().__init__()

        input_dim = 3
        self.embed_fn = None
        if multires > 0:
            self.embed_fn, input_dim = get_embedder(multires)
        
        self.actv_fn = nn.ELU()
        ############## spatially-varying diffuse albedo############
        print('Diffuse albedo network size: ', dims)
        diffuse_albedo_layers = []
        dim = input_dim
        for i in range(len(dims)):
            diffuse_albedo_layers.append(nn.Linear(dim, dims[i]))
            diffuse_albedo_layers.append(self.actv_fn)
            dim = dims[i]
        diffuse_albedo_layers.append(nn.Linear(dim, 3))

        self.diffuse_albedo_layers = nn.Sequential(*diffuse_albedo_layers)

        ##################### specular rgb ########################
        self.t_design_order = t_design_order
        self.sw_j = torch.tensor(sw_scale).cuda()

        if sw_bandwidth is None:
            sw_bandwidth = [np.random.uniform(2.0, 3.0, 120)]
            sw_bandwidth = np.array(sw_bandwidth).astype(dtype=np.float32).reshape((120, 1))
            print('init bandwidth: ', sw_bandwidth)
            sw_bandwidth = torch.from_numpy(sw_bandwidth).cuda()
        else:
            sw_bandwidth = torch.tensor(sw_bandwidth).cuda()
        self.train_bandwidth = train_bandwidth
        if self.train_bandwidth:
            self.sw_B = nn.Parameter(sw_bandwidth, requires_grad=True)

        else:
            self.sw_B = sw_bandwidth
        
        self.sw_mix = SphericalWaveletMix(self.t_design_order, self.sw_j, self.sw_B)
        
        self.envmap_height = envmap_height
        self.envmap_width = envmap_width
        
        THETA, PHI = torch.meshgrid(torch.linspace(-torch.pi/2, 3*torch.pi/2, self.envmap_width), torch.linspace(0, torch.pi, self.envmap_height), indexing='ij')

        # x = torch.sin(PHI) * torch.cos(THETA)
        # y = torch.cos(PHI)
        # z = torch.sin(PHI) * torch.sin(THETA)
        # self.light_dirs = torch.stack([x.T, y.T, z.T], dim=-1)
        
        self.sw_basis = self.sw_mix.basis(THETA, PHI)
        self.numSWs = len(self.sw_mix)
        print('Spherical t-design order: ', self.t_design_order)
        print('So, number of SW used: ', self.numSWs)
        self.white_light = white_light

        testcoeffs = torch.zeros((self.numSWs+1, 3))
        testcoeffs[0,:] = 1.0
        # testcoeffs[1,:] = 1.0
        # testcoeffs[4,:] = 1.0
        # testcoeffs[5,:] = 1.0

        if self.white_light: 
            print('Using white light!')
            self.rgb_coeffs = nn.Parameter(testcoeffs[:,0], requires_grad=True)
        else:
            self.rgb_coeffs = nn.Parameter(testcoeffs, requires_grad=True)
        
        self.white_specular = white_specular
        self.fix_specular_albedo = fix_specular_albedo
        if self.fix_specular_albedo:
            print('Fixing specular albedo: ', specular_albedo)
            specular_albedo = np.array(specular_albedo).astype(np.float32)
            assert(np.all(np.logical_and(specular_albedo > 0., specular_albedo < 1.)))
            self.specular_reflectance = nn.Parameter(torch.from_numpy(specular_albedo).reshape((1, 3)),
                                                     requires_grad=False)
        else:
            if self.white_specular:
                print('Using white specular reflectance')
                self.specular_reflectance = nn.Parameter(torch.ones(1, 1),
                                                         requires_grad=True)
            else:
                self.specular_reflectance = nn.Parameter(torch.ones(1, 3),
                                                         requires_grad=True)
            self.specular_reflectance.data = torch.abs(self.specular_reflectance.data)

        # optimize
        roughness = [np.random.uniform(1.5, 2.0)]           # big roughness
        roughness = np.array(roughness).astype(dtype=np.float32).reshape((1, 1))  # [K, 1]
        print('init roughness: ', 1.0 / (1.0 + np.exp(-roughness)))
        self.roughness = nn.Parameter(torch.from_numpy(roughness),
                                      requires_grad=True)
        # blending weights
        self.blending_weights_layers = []
    
    def get_light(self):
        rgb_coeffs = self.rgb_coeffs.clone().detach()
        sw_basis = self.sw_basis
        return rgb_coeffs, sw_basis
    
    def get_base_materials(self):
        roughness = self.roughness.clone().detach()
        shininess = torch.empty_like(roughness)
        bandwidth_parameter = torch.empty_like(roughness)
        if self.fix_specular_albedo:
            specular_reflectance = self.specular_reflectance
        else:
            specular_reflectance = torch.sigmoid(self.specular_reflectance.clone().detach())
            if self.white_specular:
                specular_reflectance = specular_reflectance.expand((-1, 3))
        return roughness, shininess, specular_reflectance, bandwidth_parameter

    def forward(self, points):

        if points is None:
            diffuse_albedo = None
            blending_weights = None
        else:
            if self.embed_fn is not None:
                points = self.embed_fn(points)
            diffuse_albedo = torch.sigmoid(self.diffuse_albedo_layers(points))

            blending_weights = None
        
        roughness = torch.sigmoid(self.roughness)

        if self.fix_specular_albedo:
            specular_reflectance = self.specular_reflectance
        else:
            specular_reflectance = torch.sigmoid(self.specular_reflectance)
            if self.white_specular:
                specular_reflectance = specular_reflectance.expand((-1, 3))
        
        ret = dict([
            ('sw_rgb_coeffs', self.rgb_coeffs),
            ('sw_basis', self.sw_basis),
            # ('sw_light_dirs', self.light_dirs),
            ('sw_roughness', roughness),
            ('sw_specular_reflectance', specular_reflectance),
            ('sw_diffuse_albedo', diffuse_albedo),
            ('sw_blending_weights', blending_weights)
        ])
        return ret

    def backward(self):
        # Call the default backward pass
        # super(SWEnvmapMaterialNetwork, self).backward()
        if self.train_bandwidth:
            self.sw_mix.calc_weights()

            THETA, PHI = torch.meshgrid(torch.linspace(-torch.pi/2, 3*torch.pi/2, self.envmap_width), torch.linspace(0, torch.pi, self.envmap_height))
            self.sw_basis = self.sw_mix.basis(THETA, PHI)

# order = 13
# sw_mix = SphericalWaveletMix(order, torch.tensor(3).cuda(), torch.tensor(2.0).cuda())
# # sw_mix2 = SphericalWaveletMix(0, 1, 1.5)
# # sw_mix3 = SphericalWaveletMix(0, 1, 3.0)
# numSWs = len(sw_mix)
# print('Spherical t-design order: ', order)
# print('So, number of SW used: ', numSWs)
# # print('ek: ', sw_mix.ek)
# # print('B: ', sw_mix.B)
# # print('j: ', sw_mix.j)
# # print('lamda: ', sw_mix.quadrature_weight)
# # print('weights: ', sw_mix.weights)
# theta = torch.linspace(-torch.pi/2, 3 * torch.pi/2, 512)
# phi = torch.linspace(0, torch.pi, 256)

# theta, phi = torch.meshgrid(theta, phi, indexing='ij')

# x = torch.sin(phi) * torch.cos(theta)
# y = torch.sin(phi) * torch.sin(theta)
# z = torch.cos(phi)

# sw_basis = sw_mix.basis(theta, phi).sum(dim=0)

# print(sw_basis.min(),sw_basis.max())

# import matplotlib.pyplot as plt
# plt.imshow(sw_basis.permute((1,0)))
# fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
# ax.plot_surface(sw_basis*x, sw_basis*y, sw_basis*z)

# # d = torch.linspace(-1,1,1000)

# # fig2 = plt.figure()
# # ax = fig2.add_subplot()
# # ax.plot(phi[0,:], sw_basis[0,:],label='order0')
# # print(sw_basis[0,:].sum()*2*torch.pi/256)
# # ax.plot(d, sw_mix.legendre(d,1),label='order1')
# # ax.plot(d, sw_mix.legendre(d,2),label='order2')

# # ax.plot(d, sw_mix.legendre(d,3),label='order3')
# # ax.plot(d, sw_mix.legendre(d,4),label='order4')
# # ax.plot(d, sw_mix.legendre(d,5),label='order5')
# # ax.plot(d, torch.exp(-1/(1-d*d)),label='gt',linestyle='--')
# # ax.legend()

# # print(sw_mix.weights)

# plt.show()

